{"version":3,"sources":["todoList.js","InputFields.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","className","align","title","map","text","key","colspan","InputFields","titleHandler","event","setState","target","value","descHandler","desc","GetInput","e","preventDefault","currentDate","Date","console","log","todoList","state","titleList","inputTitle","inputdesc","todoDesc","descList","inputDate","daysInWords","getDay","parseInt","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","todoDate","dateList","push","date","day","onSubmit","this","type","id","placeholder","onChange","required","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4f583dac.chunk.js","sourcesContent":["import React from 'react'\r\nlet list = []\r\nlet ind = 0\r\n\r\nconst TodoList = (props) => {\r\n\r\n    return (\r\n        <div className=\"dvTable-list col\">\r\n            <h2 align=\"center\">Lists</h2>\r\n            <div className=\"container\">\r\n                {props.title.map((text, key) => {\r\n\r\n                    if (key % 2 == 0) {\r\n                        key = \"even\"\r\n                    }\r\n                    else {\r\n                        key = \"odd\"\r\n                    }\r\n\r\n                    return (\r\n                        <div>\r\n                        <div className={key}>\r\n                            <div className=\"tbl-List col\" colspan=\"3\">\r\n                                <div className=\"dvTitle\">{text}</div>\r\n                                <div className=\"  btnDeleteTitle \">X</div>\r\n                            </div>\r\n                            <hr/>\r\n                           \r\n                            <div className=\"col EditOrDeleteText\">\r\n                                <div className=\"btnEditTitle\">Edit</div>\r\n                            </div>\r\n                        </div>\r\n                        <br/>\r\n                        </div>\r\n                    )\r\n                }\r\n                )}\r\n\r\n            </div>\r\n\r\n            {/* // <div className=\"tbl-List row\">\r\n                        //     <b>{text}</b>\r\n                        // </div> */}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default TodoList","import React, { Component } from 'react'\r\nimport TodoList from './todoList'\r\n\r\n\r\nlet ind = 0;\r\nclass InputFields extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            title: props.title,\r\n            desc: props.desc,\r\n            titleList: [],\r\n            descList: [],\r\n            dateList: [],\r\n            date: props.date\r\n        }\r\n    }\r\n    titleHandler = (event) => {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n    descHandler = (event) => {\r\n        this.setState({\r\n            desc: event.target.value\r\n        })\r\n    }\r\n    GetInput = (e) => {\r\n        e.preventDefault();\r\n        let day;\r\n        let currentDate = new Date()\r\n        console.log(currentDate)\r\n        let todoList = this.state.titleList\r\n        let inputTitle = this.state.title\r\n        let inputdesc = this.state.desc\r\n        let todoDesc = this.state.descList\r\n        day = this.daysInWords(currentDate.getDay());\r\n\r\n        let inputDate = day + \", \" + (parseInt(currentDate.getMonth()) + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \". \" + currentDate.getHours() + \":\" + currentDate.getMinutes() + \":\" + currentDate.getSeconds()\r\n\r\n        let todoDate = this.state.dateList\r\n\r\n        todoList.push(inputTitle);\r\n        todoDesc.push(inputdesc);\r\n        todoDate.push(inputDate);\r\n\r\n        this.setState({\r\n            titleList: todoList,\r\n            title: \"\",\r\n            descList: todoDesc,\r\n            inputdesc: \"\",\r\n            dateList: todoDate,\r\n            inputDate: \"\"\r\n        })\r\n        ind++;\r\n    }\r\n    daysInWords(day) {\r\n        if (day === 1) {\r\n            day = \"Monday\"\r\n        }\r\n        if (day === 2) {\r\n            day = \"Tuesday\"\r\n        }\r\n        if (day === 3) {\r\n            day = \"Wednesday\"\r\n        }\r\n        if (day === 4) {\r\n            day = \"Thursday\"\r\n        }\r\n        if (day === 5) {\r\n            day = \"Friday\"\r\n        }\r\n        if (day === 6) {\r\n            day = \"Saturday\"\r\n        }\r\n        if (day === 7) {\r\n            day = \"Sunday\"\r\n        }\r\n        return day\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"todo-container table-responsive\">\r\n                <div className=\"App col\" >\r\n                    <div>\r\n                        <h4>What to do?</h4>\r\n                    </div>\r\n                    <div className=\"dvInput-fields\">\r\n                        <form onSubmit={this.GetInput}>\r\n                            <input type=\"text\" id=\"txtTitle\" value={this.state.title} placeholder=\"title\" onChange={this.titleHandler} required />\r\n                            <br />\r\n                            <textarea className=\"txt-textArea\" placeholder=\"description ...\" onChange={this.descHandler}></textarea>\r\n                            <br />\r\n                            <input type=\"submit\" value=\"ADD\" className=\"btnAdd\" />\r\n                            {this.state.title}\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <TodoList title={this.state.titleList} desc={this.state.descList} date={this.state.dateList} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default InputFields;","import React from 'react';\nimport InputFields from './InputFields.js'\nimport './App.css';\n\n\n\nfunction App(props) {\n  return (\n    <div className=\"main-container\">\n      <h1 align=\"center\"> To-Do App</h1>\n\n      <InputFields title=\"\" desc=\"\" date=\"\"/>\n        \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}